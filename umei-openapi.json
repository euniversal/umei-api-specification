{
  "openapi": "3.0.3",
  "info": {
    "title": "UMEI API Specification",
    "description": "Specification for UMEI FMO API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost:8080"
    }
  ],
  "paths": {
    "/Portfolios": {
      "get": {
        "tags": [
          "Portfolio","DSO - All data","FSP - Own data"
        ],
        "summary": "List or search one or several Portfolio(s) using a query",
        "operationId": "Portfolio_Search",
        "parameters": [
          {
            "name": "gridNodeId",
            "in": "query",
            "description": "Search by grid node id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search by portfolio name",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Search by status",
            "schema": {
              "type": "string",
              "enum": [
                "Received",
                "Pending",
                "Rejected",
                "Active",
                "Inactive",
                "Completed",
                "Deleted"
              ],
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return.  If client does not specify Take the server MAY apply a default Take value (which will be returned in the SearchResult object). The default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return.  If client does not specify Take the server MAY apply a default Take value (which will be returned in the SearchResult object). The default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolio(s) successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioSearchResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Portfolio","FSP - Own data"
        ],
        "summary": "Create a new Portfolio",
        "operationId": "Portfolio_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Portfolio"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Portfolio successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/Portfolios/{portfolioId}": {
      "get": {
        "tags": [
          "Portfolio", "DSO - All data", "FSP - Own data"
        ],
        "summary": "Get an existing Portfolio by id",
        "operationId": "Portfolio_GetById",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolio successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Portfolio", "FSP - Own data"
        ],
        "summary": "Update an existing Portfolio, or create if missing",
        "operationId": "Portfolio_Update",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Portfolio"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Portfolios successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "201": {
            "description": "Portfolios successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "patch": {
        "tags": [
          "Portfolio", "FSP - Own data"
        ],
        "summary": "Patch / partially update an existing Portfolio",
        "operationId": "Portfolio_Patch",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Portfolio"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Portfolio successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Portfolio", "FSP - Own data"
        ],
        "summary": "Delete/Remove an existing Portfolio",
        "operationId": "Portfolio_Delete",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Portfolio successfully deleted"
          }
        }
      }
    },
    "/Markets": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "List all Markets",
        "operationId": "Market_List",
        "responses": {
          "200": {
            "description": "Market(s) successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketSearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/BaselineIntervals": {
      "get": {
        "tags": [
          "BaselineInterval", "DSO - All data", "FSP - Own data"
        ],
        "summary": "List or search one or several BaselineInterval(s) using a query",
        "operationId": "BaselineInterval_Search",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "query",
            "description": "Search by portfolio id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "gridNodeId",
            "in": "query",
            "description": "Search by grid node id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Search by status",
            "schema": {
              "type": "string",
              "enum": [
                "Received",
                "Pending",
                "Rejected",
                "Active",
                "Inactive",
                "Completed",
                "Deleted"
              ],
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return.  If client does not specify Take the server MAY apply a default Take value (which will be returned in the SearchResult object). The default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return.  If client does not specify Take the server MAY apply a default Take value (which will be returned in the SearchResult object). The default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaselineInterval(s) successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineIntervalSearchResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "BaselineInterval", "FSP - Own data"
        ],
        "summary": "Create a new BaselineInterval",
        "operationId": "BaselineInterval_Create_Single",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "BaselineInterval successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/BaselineIntervals/{baselineId}": {
      "get": {
        "tags": [
          "BaselineInterval", "DSO - All data", "FSP - Own data"
        ],
        "summary": "Get an existing BaselineInterval by id",
        "operationId": "BaselineInterval_GetById",
        "parameters": [
          {
            "name": "baselineId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaselineInterval successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "BaselineInterval", "FSP - Own data"
        ],
        "summary": "Update an existing BaselineInterval, or create if missing",
        "operationId": "BaselineInterval_Update",
        "parameters": [
          {
            "name": "baselineId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BaselineInterval successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              }
            }
          },
          "201": {
            "description": "BaselineInterval successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "patch": {
        "tags": [
          "BaselineInterval", "FSP - Own data"
        ],
        "summary": "Patch / partially update an existing BaselineInterval",
        "operationId": "BaselineInterval_Patch",
        "parameters": [
          {
            "name": "baselineId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BaselineInterval successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "BaselineInterval", "FSP - Own data"
        ],
        "summary": "Delete/Remove an existing BaselineInterval",
        "operationId": "BaselineInterval_Delete",
        "parameters": [
          {
            "name": "baselineId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "BaselineInterval successfully deleted"
          }
        }
      }
    },
    "/MeterReadings/{meterReadingId}": {
      "get": {
        "tags": [
          "MeterReading", "DSO - All data", "FSP - Own data"
        ],
        "summary": "Get an existing MeterReading by id",
        "operationId": "MeterReading_GetById",
        "parameters": [
          {
            "name": "meterReadingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MeterReading successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "MeterReading","FSP - Own data"
        ],
        "summary": "Update an existing MeterReading, or create if missing",
        "operationId": "MeterReading_Update",
        "parameters": [
          {
            "name": "meterReadingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MeterReading successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          },
          "201": {
            "description": "MeterReading successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "patch": {
        "tags": [
          "MeterReading","FSP - Own data"
        ],
        "summary": "Patch / partially update an existing MeterReading",
        "operationId": "MeterReading_Patch",
        "parameters": [
          {
            "name": "meterReadingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MeterReading successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "MeterReading","FSP - Own data"
        ],
        "summary": "Delete/Remove an existing MeterReading",
        "operationId": "MeterReading_Delete_By_ID",
        "parameters": [
          {
            "name": "meterReadingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "MeterReading successfully deleted"
          }
        }
      }
    },
    "/MeterReadings": {
      "post": {
        "tags": [
          "MeterReading", "FSP - Own data"
        ],
        "summary": "Create a new MeterReading",
        "operationId": "MeterReading_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "MeterReading successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "MeterReading","FSP - Own data"
        ],
        "summary": "Delete/Remove one or several existing MeterReading(s) using a query",
        "operationId": "MeterReading_Delete_By_Query",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "query",
            "description": "Delete by portfolio id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "gridNodeId",
            "in": "query",
            "description": "Delete by grid node id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Delete by status",
            "schema": {
              "type": "string",
              "enum": [
                "Received",
                "Pending",
                "Rejected",
                "Active",
                "Inactive",
                "Completed",
                "Deleted"
              ],
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "MeterReading(s) successfully deleted"
          }
        }
      },
      "get": {
        "tags": [
          "MeterReading", "DSO - All data", "FSP - Own data"
        ],
        "summary": "List or search one or several MeterReading(s) using a query",
        "operationId": "MeterReading_Search",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "query",
            "description": "Search by portfolio id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "gridNodeId",
            "in": "query",
            "description": "Search by grid node id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Search by status",
            "schema": {
              "type": "string",
              "enum": [
                "Received",
                "Pending",
                "Rejected",
                "Active",
                "Inactive",
                "Completed",
                "Deleted"
              ],
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return.  If client does not specify Take the server MAY apply a default Take value (which will be returned in the SearchResult object). The default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return.  If client does not specify Take the server MAY apply a default Take value (which will be returned in the SearchResult object). The default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MeterReading(s) successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingSearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/MeterReadings/create-multiple": {
      "post": {
        "tags": [
          "MeterReading", "FSP - Own data"
        ],
        "summary": "Create several new MeterReadings",
        "operationId": "MeterReading_CreateMultiple",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeterReading"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "MeterReadings successfully created"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/MeterReadings/import": {
      "post": {
        "tags": [
          "MeterReading", "FSP - Own data"
        ],
        "summary": "Import and create several MeterReadings",
        "operationId": "MeterReading_Import",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "MeterReadings successfully imported and created"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/Orders": {
      "get": {
        "tags": [
          "Order", "All market participants (FSPs and DSOs) - Own data"
        ],
        "summary": "List or search one or several Order(s) using a query",
        "operationId": "Order_Search",
        "parameters": [
          {
            "name": "gridNodeId",
            "in": "query",
            "description": "Search by grid node id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "marketId",
            "in": "query",
            "description": "Search by market id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "portfolioId",
            "in": "query",
            "description": "Search by portfolio id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Search by status",
            "schema": {
              "enum": [
                "Received",
                "Pending",
                "Rejected",
                "Active",
                "Inactive",
                "Completed",
                "Deleted"
              ],
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return.  If client does not specify Take the server MAY apply a default Take value (which will be returned in the SearchResult object). The default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return.  If client does not specify Take the server MAY apply a default Take value (which will be returned in the SearchResult object). The default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order(s) successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSearchResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order", "All market participants (FSPs and DSOs) - Own data"
        ],
        "summary": "Create a new Order",
        "operationId": "Order_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          }
        }
      }
    },
    "/Orders/{orderId}": {
      "get": {
        "tags": [
          "Order", "All market participants (FSPs and DSOs) - Own data"
        ],
        "summary": "Get an existing Order by id",
        "operationId": "Order_GetById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Order", "All market participants (FSPs and DSOs) - Own data"
        ],
        "summary": "Update an existing Order, or create if missing",
        "operationId": "Order_Update",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "201": {
            "description": "Order successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "patch": {
        "tags": [
          "Order", "All market participants (FSPs and DSOs) - Own data"
        ],
        "summary": "Patch / partially update an existing order",
        "operationId": "Order_Patch",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Order", "All market participants (FSPs and DSOs) - Own data"
        ],
        "summary": "Delete/Remove an existing Order",
        "operationId": "Order_Delete",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Order successfully deleted"
          }
        }
      }
    },
    "/Trades": {
      "get": {
        "tags": [
          "Trade", "All market participants (FSPs and DSOs) - All data"
        ],
        "summary": "List or search one or several Trade(s) using a query",
        "operationId": "Trade_Search",
        "parameters": [
          {
            "name": "orderId",
            "in": "query",
            "description": "Search by order id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "gridNodeId",
            "in": "query",
            "description": "Search by grid node id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "marketId",
            "in": "query",
            "description": "Search by market id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "portfolioId",
            "in": "query",
            "description": "Search by portfolio id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Search by status",
            "schema": {
              "enum": [
                "Received",
                "Pending",
                "Rejected",
                "Active",
                "Inactive",
                "Completed",
                "Deleted"
              ],
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return.  If client does not specify Take the server MAY apply a default Take value (which will be returned in the SearchResult object). The default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return.  If client does not specify Take the server MAY apply a default Take value (which will be returned in the SearchResult object). The default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trade(s) successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeSearchResult"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Portfolio",
      "description": "Requests to create, retrieve, update or delete portfolio(s)"
    },
    {
      "name": "BaselineInterval",
      "description": "Requests to create, retrieve, update or delete baseline(s)"
    },
    {
      "name": "MeterReading",
      "description": "Requests to create, retrieve, update or delete measurement(s)"
    },
    {
      "name": "Order",
      "description": "Requests to create, retrieve, update or delete order(s)"
    },
    {
      "name": "Trade",
      "description": "Requests to retrieve trade(s)"
    },
    {
      "name": "FSP - All data",
      "description": "Requests authorized only for the Flexibility Supply Providers. A FSP can have access to all data available through those request, regardless of who created this data."
    },
    {
      "name": "FSP - Own data",
      "description": "Requests authorized only for the Flexibility Supply Providers. A FSP can not have access to all data available through those request, but only to the data he created."
    },
    {
      "name": "DSO - All data",
      "description": "Requests authorized only for the Distribution System Operators. A DSO can have access to all data available through those request, regardless of who created this data."
    },
    {
      "name": "DSO - Own data",
      "description": "Requests authorized only for the Distribution System Operators. A DSO can not have access to all data available through those request, but only to the data he created."
    },
    {
      "name": "All market participants (FSPs and DSOs) - All data",
      "description": "Requests authorized for all market participants (FSPs and DSOs). A market participant can have access to all data available through those request, regardless of who created this data."
    },
    {
      "name": "All market participants (FSPs and DSOs) - Own data",
      "description": "Requests authorized for all market participants (FSPs and DSOs). A market participant can not have access to all data available through those request, but only to the data he created."
    }
  ],
  "components": {
    "responses": {
      "ValidationError": {
        "description": "The request failed validation",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            }
          }
        }
      }
    },
    "schemas": {
      "Link": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BaseLineInterval": {
        "type": "object",
        "properties": {
          "baselineId": {
            "type": "string",
            "description": "Id of the baseline (should be unique)",
            "nullable": false
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status for this baseline",
            "nullable": false
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": false,
            "readOnly": true
          },
          "portfolioId": {
            "type": "string",
            "description": "The portfolio for which this baseline applies. An error will be returned if this portfolio does not exist.",
            "nullable": false
          },
          "periodFrom": {
            "type": "string",
            "description": "The timestamp indicating the start of the interval for which this baseline applies.",
            "format": "date-time",
            "nullable": false
          },
          "periodTo": {
            "type": "string",
            "description": "The timestamp indicating the end of the interval for which this baseline applies.",
            "format": "date-time",
            "nullable": false
          },
          "power": {
            "type": "number",
            "description": "Average power in MW forecasted for the portfolio. A positive value corresponds to a production and a negative value is a consumption.",
            "format": "double",
            "minimum": -1E6,
            "maximum": 1E6,
            "multipleOf": 0.001
          }
        },
        "additionalProperties": true,
        "description": "Baseline (i.e. average power) of a portfolio for a time interval.  \r\nA baseline covers a fixed interval in time, e.g. one minute from 15:00 to 15:01 on a specific date. Dates are always UTC and should always be sent and parsed as ISO-8856-1 with the UTC time zone reference, 'Z', to avoid ambiguity."
      },
      "BaseLineIntervalSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseLineInterval"
            },
            "nullable": false
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": false,
            "readOnly": true
          }
        },
        "additionalProperties": true
      },
      "Portfolio": {
        "type": "object",
        "description": "A portfolio represents one or more assets that can participate in a flexibility market, e.g. batteries, dispatchable generators etc",
        "properties": {
          "portfolioId": {
            "type": "string",
            "description": "Id of the portfolio (should be unique)",
            "nullable": true
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status for this portfolio",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the portfolio",
            "nullable": false
          },
          "gridNodeId": {
            "type": "string",
            "description": "Id of the grid node where the assets are located. An error will be returned if this node does not exist in the grid.",
            "nullable": true
          }
        },
        "additionalProperties": true
      },
      "PortfolioSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Portfolio"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": true
      },
      "Market": {
        "type": "object",
        "properties": {
          "marketId": {
            "type": "string",
            "description": "The id of the market. This id will be used to define to which market an order belongs.",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "The name of the market",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A small description of the market",
            "nullable": true
          }
        }
      },
      "MarketSearchResult": {
        "type": "object",
        "properties": {
          "markets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Market"
            },
            "nullable": true
          }
        }
      },
      "MeterReading": {
        "type": "object",
        "properties": {
          "meterReadingId": {
            "type": "string",
            "description": "Id of the measurement (should be unique)",
            "nullable": true
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status for this measurement",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          },
          "portfolioId": {
            "type": "string",
            "description": "The portfolio for which this measurement applies. An error will be returned if this portfolio does not exist.",
            "nullable": true
          },
          "periodFrom": {
            "type": "string",
            "description": "The timestamp indicating the start of the interval for which this measurement applies.",
            "format": "date-time",
            "nullable": true
          },
          "periodTo": {
            "type": "string",
            "description": "The timestamp indicating the end of the interval for which this measurement applies.",
            "format": "date-time",
            "nullable": true
          },
          "power": {
            "type": "number",
            "description": "Average power in MW measured for the portfolio. A positive value corresponds to a production and a negative value is a consumption.",
            "format": "double",
            "minimum": -1E6,
            "maximum": 1E6,
            "multipleOf": 0.001,
            "nullable": true
          }
        },
        "additionalProperties": true,
        "description": "Power measured for a portfolio for a time interval.  \r\nA measurement covers a fixed interval in time, e.g. one minute from 15:00 to 15:01 on a specific date. Dates are always UTC and should always be sent and parsed as ISO-8856-1 with the UTC time zone reference, 'Z', to avoid ambiguity."
      },
      "MeterReadingSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterReading"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Order": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Id of the order (should be unique)",
            "nullable": true
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status of the order",
            "nullable": true
          },
          "gridNodeId": {
            "type": "string",
            "description": "The grid node this order applies to. An error will be returned if this grid node does not exist.",
            "nullable": true
          },
          "marketId": {
            "type": "string",
            "description": "Reference to the market. An error will be returned if this market does not exist.",
            "nullable": true
          },
          "portfolioId": {
            "type": "string",
            "description": "The portfolio for which this order applies.  Required for sell orders only. Not updatable.",
            "nullable": true
          },
          "regulationType": {
            "enum": [
              "Up",
              "Down"
            ],
            "type": "string",
            "description": "Type of regulation of the order. 'Up' means an increase in available power (either increased production or reduced consumption) and 'Down' means an decrease in available power (either reduced production or increased consumption). ",
            "nullable": true
          },
          "side": {
            "enum": [
              "Sell",
              "Buy"
            ],
            "type": "string",
            "description": "Type of submission of the order (buy / sell)",
            "nullable": false
          },
          "quantity": {
            "type": "number",
            "description": "The amount of power or energy of the order, the type of quantity (i.e. power or energy) being deduced from the market. For both quantities the unit is MW.   For power, it denotes the max (in absolute terms) power consumption/production in MW during the specified period.\r     For energy, it denotes the energy available during the specified period. The unit is still MW, thus the length of the interval needs to be taken into account to calculate the actual energy consumption/production.",
            "format": "double",
            "nullable": true
          },
          "unitPrice": {
            "type": "number",
            "description": "The price pr unit (currency/MWh), the currency being deduced from the market.",
            "format": "double",
            "nullable": true
          },
          "periodFrom": {
            "type": "string",
            "description": "The timestamp indicating the start of the interval for which this order applies.",
            "format": "date-time",
            "nullable": true
          },
          "periodTo": {
            "type": "string",
            "description": "The timestamp indicating the end of the interval for which this order applies.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": true,
        "description": "Order defining a quantity (power or energy) submitted (sell or buy) on a market (defined by a market ID) for a given time interval. The portfolio ID is required only for sell orders. The grid node ID is required for sell orders and buy orders unless it can be derived from the portfolio. "
      },
      "OrderSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Trade": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the trade (should be unique)",
            "nullable": true
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status for this trade",
            "nullable": true
          },
          "marketId": {
            "type": "string",
            "description": "Reference to the market.",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Reference to the order.",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "Quantity traded/filled.",
            "format": "double",
            "nullable": true
          },
          "side": {
            "enum": [
              "Buy",
              "Sell"
            ],
            "type": "string",
            "description": "Type of the trade (buy / sell)",
            "nullable": true
          },
          "unitPrice": {
            "type": "number",
            "description": "Price at which the quantity has been traded/filled",
            "format": "double",
            "nullable": true
          },
          "periodFrom": {
            "type": "string",
            "description": "The timestamp indicating the start of the interval for which this trade applies.",
            "format": "date-time",
            "nullable": true
          },
          "periodTo": {
            "type": "string",
            "description": "The timestamp indicating the end of the interval for which this trade applies.",
            "format": "date-time",
            "nullable": true
          },
          "gridNodeId": {
            "type": "string",
            "description": "Reference to the grid node.",
            "nullable": true
          },
          "portfolioId": {
            "type": "string",
            "description": "Reference to the portfolio.",
            "nullable": true
          },
          "regulationType": {
            "enum": [
              "Up",
              "Down"
            ],
            "type": "string",
            "description": "Type of regulation of the trade. 'Up' means an increase in available power (either increased production or reduced consumption) and 'Down' means an decrease in available power (either reduced production or increased consumption). ",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          },
          "customProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": true
      },
      "TradeSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trade"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "description": "An object describing the problem in a machine-and-user readable version, based on / extending RFC7807. ",
        "additionalProperties": true,
        "properties": {
          "type": {
            "type": "string",
            "description": "A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when de-referenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be \"about:blank\"",
            "nullable": false,
            "example": "https://umei.org/error-codes/invalid-grid-reference"
          },
          "title": {
            "type": "string",
            "description": "A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation;",
            "example": "The grid node id is not found or not valid for this operation"
          },
          "status": {
            "type": "string",
            "description": "The HTTP status code generated by the origin server for this occurrence of the problem. ",
            "example": "400",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "example": "Grid node #231432 MyGridNode is not participating in this market"
          },
          "instance": {
            "type": "string",
            "description": "A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if de-referenced.",
            "example": "https://my-fmo.eu/error-instances/4232312"
          },
          "validation-errors": {
            "type": "array",
            "description": "If present, contains a list of invalid parameters that the client should correct before retrying the operation",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "description": "Reference to a field that failed validation along with an description of the validation error",
        "properties": {
          "property": {
            "type": "string",
            "description": "The name of the property, specified as a relative or absolute json path, e.g. 'marketId' or 'quantities[1].quantity'",
            "nullable": false,
            "example": "gridNodeId"
          },
          "message": {
            "type": "string",
            "description": "Description of the issue with this property",
            "example": "The specified grid node is not participating in this market",
            "nullable": false
          },
          "value": {
            "type": "string",
            "description": "Value received as input for this property",
            "example": "231432",
            "nullable": true
          }
        }
      }
    }
  }
}
