{
  "openapi": "3.0.3",
  "info": {
    "title": "UMEI API Specification",
    "description": "Specification for UMEI FMO API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost:8080"
    }
  ],
  "paths": {
    "/AssetPortfolios": {
      "get": {
        "tags": [
          "AssetPortfolio"
        ],
        "summary": "List or search AssetPortfolios",
        "operationId": "AssetPortfolio_Search",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolioSearchResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AssetPortfolio"
        ],
        "summary": "Create a new AssetPortfolio",
        "operationId": "AssetPortfolio_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              }
            }
          }
        }
      }
    },
    "/AssetPortfolios/{id}": {
      "get": {
        "tags": [
          "AssetPortfolio"
        ],
        "summary": "Get an existing AssetPortfolio by id",
        "operationId": "AssetPortfolio_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AssetPortfolio"
        ],
        "summary": "Update an existing AssetPortfolio",
        "operationId": "AssetPortfolio_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "AssetPortfolio"
        ],
        "summary": "Patch / partially update an existing AssetPortfolio",
        "operationId": "AssetPortfolio_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AssetPortfolio"
        ],
        "summary": "Delete/Remove an existing AssetPortfolio",
        "operationId": "AssetPortfolio_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/BaselineIntervals": {
      "get": {
        "tags": [
          "BaselineInterval"
        ],
        "summary": "List or search BaselineIntervals",
        "operationId": "BaselineInterval_Search",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineIntervalSearchResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "BaselineInterval"
        ],
        "summary": "Create a new BaselineInterval",
        "operationId": "BaselineInterval_Create_Single",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              }
            }
          }
        }
      }
    },
    "/BaselineIntervals/{id}": {
      "get": {
        "tags": [
          "BaselineInterval"
        ],
        "summary": "Get an existing BaselineInterval by id",
        "operationId": "BaselineInterval_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "BaselineInterval"
        ],
        "summary": "Update an existing BaselineInterval",
        "operationId": "BaselineInterval_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "BaselineInterval"
        ],
        "summary": "Patch / partially update an existing BaselineInterval",
        "operationId": "BaselineInterval_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BaselineInterval"
        ],
        "summary": "Delete/Remove an existing BaselineInterval",
        "operationId": "BaselineInterval_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/GridNodes/grid": {
      "get": {
        "tags": [
          "GridNode"
        ],
        "summary": "Get grid hierarchy",
        "operationId": "GridNode_GetGrid",
        "parameters": [
          {
            "name": "marketId",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeNode"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/MeterReadings/{id}": {
      "get": {
        "tags": [
          "MeterReading"
        ],
        "summary": "Get an existing MeterReading by id",
        "operationId": "MeterReading_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "MeterReading"
        ],
        "summary": "Update an existing MeterReading",
        "operationId": "MeterReading_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "MeterReading"
        ],
        "summary": "Patch / partially update an existing MeterReading",
        "operationId": "MeterReading_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MeterReading"
        ],
        "summary": "Delete/Remove an existing MeterReading",
        "operationId": "MeterReading_Delete_By_ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/MeterReadings": {
      "post": {
        "tags": [
          "MeterReading"
        ],
        "summary": "Create a new MeterReading",
        "operationId": "MeterReading_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MeterReading"
        ],
        "summary": "Delete/Remove one or several existing MeterReading(s) using a query",
        "operationId": "MeterReading_Delete_By_Query",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "MeterReading"
        ],
        "summary": "List or search MeterReadings",
        "operationId": "MeterReading_Search",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingSearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/MeterReadings/create-multiple": {
      "post": {
        "tags": [
          "MeterReading"
        ],
        "operationId": "MeterReading_CreateMultiple",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeterReading"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/MeterReadings/import": {
      "post": {
        "tags": [
          "MeterReading"
        ],
        "operationId": "MeterReading_Import",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Orders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "List or search Orders",
        "operationId": "Order_Search",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSearchResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create a new Order",
        "operationId": "Order_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/Orders/{id}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get an existing Order by id",
        "operationId": "Order_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update an existing Order",
        "operationId": "Order_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Order"
        ],
        "summary": "Patch / partially update an existing order",
        "operationId": "Order_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete/Remove an existing Order",
        "operationId": "Order_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Trades": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "List or search Trades",
        "operationId": "Trade_Search",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeSearchResult"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Link": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BaseLineInterval": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status for this item",
            "nullable": false
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": false,
            "readOnly": true
          },
          "assetPortfolioId": {
            "type": "string",
            "nullable": false
          },
          "periodFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "periodTo": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "power": {
            "type": "number",
            "description": "Average power in MW forecasted for the portfolio of assets. A positive value corresponds to a production and a negative value is a consumption.",
            "format": "double",
            "minimum": -1E6,
            "maximum": 1E6,
            "multipleOf": 0.001
          }
        },
        "additionalProperties": true,
        "description": "BaseLineInterval covers a fixed interval in time, e.g. one minute from 15:00 to 15:01 on a specific date. Dates are always UTC and should always be sent and parsed as ISO-8856-1 with the UTC time zone reference, 'Z', to avoid ambiguity."
      },
      "BaseLineIntervalSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseLineInterval"
            },
            "nullable": false
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": false,
            "readOnly": true
          }
        },
        "additionalProperties": true
      },
      "AssetPortfolio": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status for this item",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": false
          }
        },
        "additionalProperties": true
      },
      "AssetPortfolioSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPortfolio"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": true
      },
      "TreeNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": false,
            "readOnly": true
          },
          "parentId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreeNode"
            },
            "nullable": false,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MeterReading": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status for this item",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          },
          "assetPortfolioId": {
            "type": "string",
            "nullable": true
          },
          "periodFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "periodTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "power": {
            "type": "number",
            "description": "Average power consumption in MW measured for the portfolio of assets. A positive value corresponds to a production and a negative value is a consumption.",
            "format": "double",
            "minimum": -1E6,
            "maximum": 1E6,
            "multipleOf": 0.001,
            "nullable": true
          }
        },
        "additionalProperties": true,
        "description": "MeterReading covers a fixed interval in time, e.g. one minute from 15:00 to 15:01 on a specific date. Dates are always UTC and should always be sent and parsed as ISO-8856-1 with the UTC time zone reference, 'Z', to avoid ambiguity."
      },
      "MeterReadingSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterReading"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status of the order",
            "nullable": true
          },
          "gridNodeId": {
            "type": "string",
            "description": "The grid node this order applies to. An error will be returned if this grid node does not exist.",
            "nullable": true
          },
          "marketId": {
            "type": "string",
            "description": "Reference to the market. An error will be returned if this market does not exist.",
            "nullable": true
          },
          "assetPortfolioId": {
            "type": "string",
            "description": "The asset portfolio for which this order applies.  \r\nRequired for sell orders only.\r\nNot updatable.",
            "nullable": true
          },
          "regulationType": {
            "enum": [
              "Up",
              "Down"
            ],
            "type": "string",
            "description": "Type of regulation of the order. 'Up' means an increase in available power (either increased production or reduced consumption) and 'Down' means an decrease in available power (either reduced production or increased consumption). ",
            "nullable": true
          },
          "side": {
            "enum": [
              "Sell",
              "Buy"
            ],
            "type": "string",
            "description": "Type of submission of the order (buy / sell)",
            "nullable": false
          },
          "quantity": {
            "type": "number",
            "description": "The amount of power or energy of the order, the type of quantity (i.e. power or energy) being deduced from the market. For both quantities the unit is MW.  \r\n\r\nFor power, it denotes the max (in absolute terms) power\r\nconsumption/production in MW during the specified period.\r\n            \r\nFor energy, it denotes the energy available during the specified period. The unit is still MW, thus the length of the interval needs to be taken into account to calculate the actual energy consumption/production.",
            "format": "double",
            "nullable": true
          },
          "unitPrice": {
            "type": "number",
            "description": "The price pr unit (currency/MWh), the currency being deduced from the market.",
            "format": "double",
            "nullable": true
          },
          "periodFrom": {
            "type": "string",
            "description": "The timestamp indicating the start of the interval for which this order applies.",
            "format": "date-time",
            "nullable": true
          },
          "periodTo": {
            "type": "string",
            "description": "The timestamp indicating the end of the interval for which this order applies.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": true,
        "description": "Order defining a quantity (power or energy) submitted (sell or buy) on a market (defined by a market ID) for a given time interval. The asset portfolio ID is required only for sell orders. The grid node ID is required for sell orders and buy orders unless it can be derived from the asset portfolio. "
      },
      "OrderSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Trade": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status for this item",
            "nullable": true
          },
          "marketId": {
            "type": "string",
            "description": "Reference to the market.",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Reference to the order.",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "Quantity traded/filled.",
            "format": "double",
            "nullable": true
          },
          "side": {
            "enum": [
              "Buy",
              "Sell"
            ],
            "type": "string",
            "nullable": true
          },
          "unitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "periodFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "periodTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "gridNodeId": {
            "type": "string",
            "nullable": true
          },
          "assetPortfolioId": {
            "type": "string",
            "nullable": true
          },
          "regulationType": {
            "enum": [
              "Up",
              "Down"
            ],
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          },
          "customProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": true
      },
      "TradeSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trade"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
